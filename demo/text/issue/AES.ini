package com.ceway.apigateway.util;

import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * ClassName:AESUtil 
 * Date:  2018年1月3日
 * @author CW5320
 * @Description: AES加密解密
 */
public class AESUtil {
	private static final byte[] IVPARAMETERS = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };
	private static final String KEY_ALGORITHM = "AES";
	private static final String CBC_CIPHER_ALGORITHM = "AES/CBC/PKCS5Padding";
	private static final Logger LOG = LoggerFactory.getLogger(AESUtil.class);
	
	/**
	 * @Title: aesEncode    
	 * @return byte[]  返回类型 
	 * @Description: AES加密
	 */
	public static byte[] aesEncode(byte[] data,SecretKey sKey) {
			try {
				IvParameterSpec ivParameterSpec = new IvParameterSpec(IVPARAMETERS);
				Cipher cipher = Cipher.getInstance(CBC_CIPHER_ALGORITHM);
				cipher.init(Cipher.ENCRYPT_MODE,sKey,ivParameterSpec);
				LOG.info("加密后的数据："+(cipher.doFinal(data)).toString());
				return cipher.doFinal(data);
			} catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | InvalidAlgorithmParameterException
					|IllegalBlockSizeException |BadPaddingException e) {
				e.printStackTrace();  
			} 
		return null;
	}
	
	/**
	 * @Title: aesDecode    
	 * @return String  返回类型 
	 * @Description: AES解密
	 */
	private static String aesDecode(byte[] data,SecretKey sKey) {
		IvParameterSpec ivParameterSpec = new IvParameterSpec(IVPARAMETERS);
		try {
			Cipher cipher = Cipher.getInstance(CBC_CIPHER_ALGORITHM);
			cipher.init(Cipher.DECRYPT_MODE,sKey,ivParameterSpec);
			LOG.info("解密后的数据："+(cipher.doFinal(data)).toString());
			return new String(cipher.doFinal(data));
			
		} catch (NoSuchAlgorithmException |NoSuchPaddingException | InvalidKeyException | InvalidAlgorithmParameterException 
				| IllegalBlockSizeException | BadPaddingException e) {
			e.printStackTrace();  
		} 
		return null;
	}
	
	/**
	 * 
	 * @Title: generateAESSecretKey    
	 * @return byte[]  返回类型 
	 * @Description: 初始化密钥
	 */
	private static byte[] generateAESSecretKey() {
		KeyGenerator keyGenerator;
		try {
			keyGenerator = KeyGenerator.getInstance(KEY_ALGORITHM);
			keyGenerator.init(128);
			return keyGenerator.generateKey().getEncoded();
			
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();  
		}
		return null;
	}
	
	/**
	 * @Title: restoreSectetkey    
	 * @return SecretKey  返回类型 
	 * @Description: 还原密钥
	 */
	private static SecretKey toKey(byte[] secretBytes) {
		SecretKey secretKey = new SecretKeySpec(secretBytes, KEY_ALGORITHM);
		LOG.info("密钥："+secretKey.toString());
		return secretKey;
	}
	
	/**
	 * @Title: toKey    
	 * @return SecretKey  返回类型 
	 * @Description: tokey
	 */
	private static SecretKey toKey(String key) {
		SecretKey secretKey = new SecretKeySpec(key.getBytes(), KEY_ALGORITHM);
		LOG.info("密钥："+secretKey.toString());
		return secretKey;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

}
  
