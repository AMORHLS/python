1、why网关(springcloud-zuul)
       <1>实现了路由功能来屏蔽诸多服务细节；
       <2>实现了服务级别、均衡负载的路由；
       <3>接口权限校验与微服务业务逻辑的解耦。
        通过服务网关中的过滤器，在各生命周期中去校验请求的内容，将原本在对外服务层做的校验前移，保证了微服务的无状态性，同时降低了微服务的测试难度，让服务本身更集中关注业务逻辑的处理。实现了断路器，不会因为具体微服务的故障而导致服务网关的阻塞，依然可以对外服务。

2、Zuul默认过滤器
默认的核心过滤器一览表
Zuul默认注入的过滤器，它们的执行顺序在FilterConstants类，我们可以先定位在这个类，然后再看这个类的过滤器的执行顺序以及相关的注释，可以很轻松定位到相关的过滤器，也可以直接打开 
spring-cloud-netflix-core.jar的 zuul.filters包，可以看到一些列的filter，现在我以表格的形式，列出默认注入的filter.

过滤器	order	描述	类型
ServletDetectionFilter	-3	检测请求是用 DispatcherServlet还是 ZuulServlet	pre
Servlet30WrapperFilter	-2	在Servlet 3.0 下，包装 requests	pre
FormBodyWrapperFilter	-1	解析表单数据	pre
SendErrorFilter	0	如果中途出现错误	error
DebugFilter	1	设置请求过程是否开启debug	pre
PreDecorationFilter	5	根据uri决定调用哪一个route过滤器	pre
RibbonRoutingFilter	10	如果写配置的时候用ServiceId则用这个route过滤器，该过滤器可以用Ribbon 做负载均衡，用hystrix做熔断	route
SimpleHostRoutingFilter	100	如果写配置的时候用url则用这个route过滤	route
SendForwardFilter	500	用RequestDispatcher请求转发	route
SendResponseFilter	1000	用RequestDispatcher请求转发	post

过滤器的order值越小，就越先执行，并且在执行过滤器的过程中，它们共享了一个RequestContext对象，该对象的生命周期贯穿于请求，可以看出优先执行了pre类型的过滤器，并将执行后的结果放在RequestContext中，供后续的filter使用，比如在执行PreDecorationFilter的时候，决定使用哪一个route，它的结果的是放在RequestContext对象中，后续会执行所有的route的过滤器，如果不满足条件就不执行该过滤器的run方法。最终达到了就执行一个route过滤器的run()方法。

2、查询三个月之内的数据 ：select * from sys_operate_log where operate_time >DATE_SUB(CURDATE(), INTERVAL 2 MONTH)
   查询三个月之前的数据 ：select * from sys_operate_log where operate_time < DATE_SUB(CURDATE(), INTERVAL 2 MONTH)
