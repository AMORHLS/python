
网关记录日志
@Component
public class LogFilter extends ZuulFilter {

	private static final Logger LOGGER = LoggerFactory.getLogger(LogFilter.class);

	@Autowired
	private ISysOperateService sysOperateService;

	@Autowired
	private ISysOperateLogService sysOperateLogService;

	@Autowired
	private IAppListService  appListService;
	// ----------------------------登录日志---------------------------

	/**
	 * id(uuid) login_name operate_time(new Date) remote_ip real_name operate_id
	 * operate_status request_param response_param operate_source
	 */
	//判断list是否为空的方法
	private String isNotEmpty(List<String> list){
		return list != null && !list.isEmpty() ? list.get(0) : "";
	}
	
	@Override
	public Object run() {
		RequestContext requestContext = RequestContext.getCurrentContext();
		// 通过request上下文 获取请求数据
		Map<String, List<String>> dataMap = requestContext.getRequestQueryParams();
		
		List<String> zuulLoginNameList = dataMap.get("zuulLoginName");
		List<String> appIdList = dataMap.get("appId");
		List<String> dataJsonList = dataMap.get("dataJson");
		
		String zuulLoginName = isNotEmpty(zuulLoginNameList);
		String appId = isNotEmpty(appIdList);
		String dataJson = isNotEmpty(dataJsonList);
		
		HttpServletRequest request = requestContext.getRequest();
		HttpServletResponse response = requestContext.getResponse();
		// 根据uri来获取系统操作信息
		String uri = request.getRequestURI();
		String remoteIp = request.getHeader("Origin"); 
//		String remote = request.getRemoteAddr();  //ip地址
		
		SysOperate so = sysOperateService.getByOperateUrl(uri);
		if (so != null) {
			SysOperateLog sol = new SysOperateLog();
			
			sol.setId(RandomUtil.randomString(32, null));
			if (dataJson != null) {
				sol.setRequestParam(dataJson);  //???
			}
			if (zuulLoginName != null) {
				sol.setLoginName(zuulLoginName);
			}
			if (appId != null) {
				AppList appList = appListService.getByAppId(appId);
				String operateSource = appList.getAppName();
				sol.setOperateSource(operateSource);
			}
			sol.setOperateId(so.getId());
			sol.setOperateStatus(response.getStatus() == 200 ? 1 : 0);
			sol.setRemoteIp(remoteIp);
			sol.setOperateTime(new Date());
			// sol.setResponseParam(resJson);
			InputStream inputStream = requestContext.getResponseDataStream();  //复制流？？
			Gson gson = new Gson();
			try {
				String body = StreamUtils.copyToString(inputStream,Charset.forName("UTF-8"));
				if (StringUtils.isNotBlank(body)) {
					Map<String, String> result = gson.fromJson(body, Map.class);
					sol.setResponseParam(body);
					body = gson.toJson(result);
					LOGGER.info("返回body----" + body);
					requestContext.setResponseBody(body);
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
			sysOperateLogService.insertLog(sol);
		}
		return null;
	}

	@Override
	public boolean shouldFilter() {

		return true;
	}

	@Override
	public int filterOrder() {

		return 1;
	}

	@Override
	public String filterType() {

		return "post";
	}

}
